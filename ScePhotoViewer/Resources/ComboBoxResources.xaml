<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ScePhotoControls="clr-namespace:ScePhoto.Controls;assembly=ScePhoto">

    <!-- The drop-down arrow shape -->
    <Geometry x:Key="DownArrowGeometry">M 0 0 L 3.5 4 L 7 0 Z</Geometry>

    <!-- ToggleButton drop down for the breadcrumb bar combo box-->
    <Style x:Key="BreadcrumbDropToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="ButtonBorder" HorizontalAlignment="Stretch" Opacity="1" Background="Transparent" BorderThickness="1,0,0,0" BorderBrush="Transparent">
                        <Path HorizontalAlignment="Center" Margin="0,1,3,0" x:Name="Arrow" VerticalAlignment="Center" Fill="#DDDDDD" Data="{StaticResource DownArrowGeometry}">
                            <Path.LayoutTransform>
                                <TransformGroup>
                                    <RotateTransform Angle="-90"/>
                                    <ScaleTransform ScaleX="1.25" ScaleY="1.25"/>
                                </TransformGroup>
                            </Path.LayoutTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ScePhotoControls:BreadcrumbBox}}, Path=PreviousBreadcrumbBox.TextAreaControl.IsMouseOver, Mode=OneWay}" Value="True">
                            <Setter Property="Background" TargetName="ButtonBorder" Value="#444444"/>
                            <Setter Property="BorderBrush" TargetName="ButtonBorder" Value="#292929"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="ButtonBorder" Value="#666666"/>
                            <Setter Property="BorderBrush" TargetName="ButtonBorder" Value="#292929"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" TargetName="ButtonBorder" Value="#666666"/>
                            <Setter Property="BorderBrush" TargetName="ButtonBorder" Value="#292929"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="ButtonBorder" Value="#444444"/>
                            <Setter Property="BorderBrush" TargetName="ButtonBorder" Value="#292929"/>
                        </Trigger>
                        <!-- Hide the arrow if the control hasn't finished loading; however, unhide it if there is no previous control.  A MultiDataTrigger would be more
                             appropriate here, but you can't 'not' a result in XAML.  Therefore, two triggers *in this order*.-->
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ScePhotoControls:BreadcrumbBox}}, Path=PreviousBreadcrumbBox.SelectedItem, Mode=OneWay}" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="ButtonBorder" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ScePhotoControls:BreadcrumbBox}}, Path=PreviousBreadcrumbBox, Mode=OneWay}" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="ButtonBorder" Value="Visible"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Button style for the selected item, executes the attached command when clicked -->
    <Style x:Key="BreadcrumbCommandButton" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="ButtonBorder" Background="Transparent">
                        <ContentPresenter/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="ButtonBorder" Value="#666666"/>
                            <Setter Property="BorderBrush" TargetName="ButtonBorder" Value="#292929"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" TargetName="ButtonBorder" Value="#666666"/>
                            <Setter Property="BorderBrush" TargetName="ButtonBorder" Value="#292929"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ScePhotoControls:BreadcrumbBox}}, Path=NextBreadcrumbBox.DropDownControl.IsMouseOver, Mode=OneWay}" Value="True">
                            <Setter Property="Background" TargetName="ButtonBorder" Value="#444444"/>
                            <Setter Property="BorderBrush" TargetName="ButtonBorder" Value="#292929"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Control template for the breadcrumb box -->
    <Style TargetType="{x:Type ScePhotoControls:BreadcrumbBox}">
        <Style.Resources>
            <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="#666666"/>
        </Style.Resources>
        <Setter Property="Foreground" Value="#DDDDDD"/>
        <Setter Property="BorderBrush" Value="#595959"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Padding" Value="4,3"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid SnapsToDevicePixels="true" x:Name="MainGrid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="25"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Popup AllowsTransparency="true" IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Margin="1" x:Name="PART_Popup" Grid.ColumnSpan="2">
                            <Border x:Name="DropDownBorder" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding Path=ActualWidth, ElementName=MainGrid}" Background="#333333" BorderBrush="#888888" BorderThickness="1">
                                <ScrollViewer CanContentScroll="true">
                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.DirectionalNavigation="Contained"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                        <ToggleButton Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" Style="{StaticResource BreadcrumbDropToggleButton}" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" x:Name="PART_DropDownButton"/>
                        <Button Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Command}" CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CommandParameter}" x:Name="PART_TextAreaButton" Grid.Column="1" Style="{StaticResource BreadcrumbCommandButton}"/>
                        <ContentPresenter IsHitTestVisible="false" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding Tag}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Grid.Column="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.3"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>